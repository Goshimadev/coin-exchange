{"version":3,"sources":["logo.svg","components/AccountBalance/AccountBalance.jsx","components/Coin/Coin.jsx","components/CoinList/CoinList.jsx","components/Header/Header.jsx","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Section","styled","section","Balance","div","Button","button","BalanceToggleButton","formatter","Intl","NumberFormat","style","currency","AccountBalance","props","buttonText","showBalance","content","buttonClass","format","amount","onClick","handleBalanceVisibilityChange","className","handleBrrr","Td","td","TdControls","TdName","Coin","rank","name","ticker","price","balance","max_supply","action","method","event","preventDefault","handleRefresh","tickerId","handleTransaction","Table","table","CoinList","coinData","map","key","HeaderStyled","header","Image","img","H1","h1","Header","src","logo","alt","Component","Div","P","p","A","a","formatPrice","parseFloat","Number","toFixed","App","useState","setBalance","setShowBalance","setCoinData","componentDidMount","axios","get","response","coinIds","data","slice","coin","id","promises","Promise","all","coinPriceData","symbol","quotes","USD","useEffect","length","valueChangeId","tickerUrl","newPrice","newCoinData","values","newValues","oldBalance","oldValue","isBuy","balanceChange","href","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d0e77bfb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\n\n// we can use any name here and replace the html tag with it \nconst Section = styled.section`\n    font-size: 1.4rem;\n    font-weight: 400;\n    line-height: 3rem;\n    text-align: center;\n    margin: 1rem 0 2rem 0;\n    display: inline-block;\n`\nconst Balance = styled.div`\n    min-width: 250px;\n    margin: 2rem 0 0 0;\n    font-size: 1.8em;\n    font-weight: 400;\n    vertical-align: middle;\n    text-align: center;\n`\nconst Button = styled.button`\n    margin: 0 8px;;\n    font-size: 1.2rem;\n`\n// we can copy the parent element style by adding it in ()s\nconst BalanceToggleButton = styled(Button)`\n    width: 150px;\n`\n\nvar formatter = Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD'\n});\n\nexport default function AccountBalance(props) {\n\n  const buttonText = props.showBalance ? 'Hide Balance' : 'Show Balance'\n  let content = '\\u00A0';\n  // In bootstrap we select buttons with the 'btn' class\n  const buttonClass = 'btn ' + (props.showBalance ? 'btn-warning' : 'btn-info');\n  if ( props.showBalance ) {\n    content = <>{ formatter.format(props.amount) }</>\n  }\n\n  return (\n      <>  \n        <Balance>{content}</Balance> \n        <Section>\n            <BalanceToggleButton \n            onClick={props.handleBalanceVisibilityChange}\n            className={buttonClass}>\n            {buttonText}\n            </BalanceToggleButton>\n            <Button className='btn btn-success' \n            // since the setBalance state we need is in App.js we use props to create \n            // the function handleBrrr, which we will write in App.js\n                    onClick={props.handleBrrr}>\n                <i className='fas fa-helicopter'></i>\n            </Button>\n        </Section>\n      </>  \n  );      \n\n}\n\nAccountBalance.propTypes = {\n    amount: PropTypes.number.isRequired\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Td = styled.td`\n    width: 14vw;\n`\nconst TdControls = styled(Td)`\n    width: 34vw;\n`\nconst TdName = styled(Td)`\n    width: 24vw;\n`\nconst Button = styled.button`\n    font-size: 11px;\n    width: 64px;\n    margin: 3px 5px 0;\n`\n\nexport default function Coin(props) {\n\n    // in functional components we add const to our functions \n    // because these are members of the Coin component \n    // we don't want them to become global variables    \n    const handleRefresh = (event) => {\n        // Prevent the default action of submitting the form \n        event.preventDefault();\n        props.handleRefresh(props.tickerId);\n    }\n\n    const handleBuy = (event) => {\n        // Prevent the default action of submitting the form \n        event.preventDefault();\n        props.handleTransaction(true, props.tickerId);\n    }\n\n    const handleSell = (event) => {\n        // Prevent the default action of submitting the form \n        event.preventDefault();\n        props.handleTransaction(false, props.tickerId);\n    }\n\n    return (\n        <tr>\n            <Td>{props.rank}</Td>\n            <TdName>{props.name}</TdName>\n            <Td>{props.ticker}</Td>\n            <Td>${props.price}</Td>\n            <Td>{props.showBalance ? props.balance : '-'}</Td>\n            <Td>{props.max_supply}</Td>\n            <TdControls>\n                <form action=\"#\" method=\"POST\">\n                    <Button className='btn btn-info' onClick={handleRefresh}>\n                        Refresh\n                    </Button>\n                    <Button className='btn btn-success' onClick={handleBuy}>\n                        Buy\n                    </Button>\n                    <Button className='btn btn-danger' onClick={handleSell}>\n                        Sell\n                    </Button>\n                </form>\n            </TdControls>\n        </tr>\n    );\n}\n\n// isRequired will give us an error message if we don't add all props\nCoin.propTypes = {\n    name: PropTypes.string.isRequired,\n    ticker: PropTypes.string.isRequired,\n    price: PropTypes.number.isRequired\n}","import React from 'react';\nimport Coin from '../Coin/Coin';\nimport styled from 'styled-components';\n\nconst Table = styled.table `\n    font-size: 1rem;\n`\n\nconst TableClass = 'table table-hover table-primary table-bordered';\n\nexport default function CoinList(props) {\n\n  return (\n      <Table className={TableClass}>\n      <thead>\n        <tr>\n          <th>Rank</th>\n          <th>Name</th> \n          <th>Ticker</th> \n          <th>Price</th>\n          <th>Balance</th> \n          <th>Max Supply</th> \n          <th>Actions</th>  \n        </tr>  \n      </thead> \n      <tbody>\n        {\n          // we give the return value of this function in the Coin component \n          // each item needs a unique id, so we use ticker as each coin has a unique ticker \n          props.coinData.map( ({key, name, ticker, price, balance, max_supply, rank}) => \n            <Coin key={key}\n            handleRefresh={props.handleRefresh}\n            handleTransaction={props.handleTransaction}\n            name={name} \n            ticker={ticker}\n            showBalance={props.showBalance} \n            balance={balance} \n            price={price} \n            tickerId={key}\n            max_supply={max_supply}\n            rank={rank}/>\n          )\n        }\n      </tbody> \n      </Table>\n  )\n\n}\n","import React, { Component } from 'react';\nimport logo from '../../logo.svg';\nimport styled from 'styled-components';\n\nconst HeaderStyled = styled.header `\n    background-color: #282c34;\n    min-height: 10vh;\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    align-items: center;\n    justify-content: flex-start;\n    color: white;\n`\n\nconst Image = styled.img `\n    height: 6rem;\n    pointer-events: none;\n`\n\nconst H1 = styled.h1 `\n    font-size: 3rem;\n    line-height: 6rem;\n    font-weight: 400;\n    min-width: 300px;\n`\n\nexport default class Header extends Component {\n  render() {\n    return (\n        <HeaderStyled>\n            <Image src={logo} alt=\"React logo\" />\n            <H1>\n              Coin Exchange\n            </H1>\n          </HeaderStyled>\n    )\n  }\n}\n","import React, {useState, useEffect} from 'react';\nimport AccountBalance from './components/AccountBalance/AccountBalance';\nimport CoinList from './components/CoinList/CoinList';\nimport Header from './components/Header/Header';\nimport styled from 'styled-components';\nimport axios from 'axios';\n\n//import 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootswatch/dist/flatly/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/js/all.js';\n\nconst Div = styled.div `\n    text-align: center;\n    background-color: rgb(20, 56, 97);\n    color: #ccc;\n`\nconst P = styled.p`\n    text-align: center;\n    margin: 2rem auto;\n`\n\nconst A = styled.a`\ntext-decoration: none;\n`\n\nconst COIN_COUNT = 10;\nconst formatPrice = price => parseFloat(Number(price).toFixed(4));\n\nfunction App(props) {\n\n  // the states provide values anywhere in the application \n  // we initialize the values with useState - and can set new ones with (setName) \n  const [balance, setBalance] = useState(10000);\n  const [showBalance, setShowBalance] = useState(false);\n  const [coinData, setCoinData] = useState([]);\n\n  // These are the life cycles methods \n  const componentDidMount = async () => {\n    // here we load the data with axios \n    const response = await axios.get('https://api.coinpaprika.com/v1/coins');\n    // we use slice to limit our coins to the coin_count value\n    const coinIds = response.data.slice(0, COIN_COUNT).map( coin => coin.id);\n    const tickerUrl = 'https://api.coinpaprika.com/v1/tickers/';\n    const promises = coinIds.map(id => axios.get(tickerUrl + id));\n    const coinData = await Promise.all(promises);\n    const coinPriceData = coinData.map(function(response) {\n      const coin = response.data;\n      return {\n        key:    coin.id,\n        name:   coin.name,\n        ticker: coin.symbol,\n        balance: 0,\n        max_supply: coin.max_supply,\n        rank: coin.rank,\n        price: formatPrice(coin.quotes.USD.price),\n      };\n    })\n    // retrieve the prices\n    setCoinData(coinPriceData);\n  }\n\n  useEffect(() => {\n    // here we have no data yet so we do component did mount\n    // if we have data we update \n    if (coinData.length === 0) {\n      componentDidMount();\n    }\n  });\n\n  const handleBrrr = () => {\n    setBalance(oldBalance => oldBalance + 1200);\n  }\n\n  const handleTransaction = (isBuy, valueChangeId) => {\n    var balanceChange = isBuy ? 1 : -1;\n    const newCoinData = coinData.map( function(values) {\n      let newValues = {...values};\n      if ( valueChangeId === values.key) {\n        newValues.balance += balanceChange;\n        setBalance( oldBalance => oldBalance - balanceChange * newValues.price );\n      }\n      return newValues;\n    });\n    setCoinData(newCoinData);\n  }\n\n  const handleBalanceVisibilityChange = () => {\n    // we're negating the old value\n    // if it was false is gonna be true, if it was true is gonna be false\n    setShowBalance(oldValue => !oldValue);\n  }  \n\n  // the method find will find us the price of the state we click\n  const handleRefresh = async (valueChangeId) => {\n    const tickerUrl = `https://api.coinpaprika.com/v1/tickers/${valueChangeId}`;\n    const response = await axios.get(tickerUrl);\n    const newPrice = formatPrice(response.data.quotes.USD.price);\n    const newCoinData = coinData.map( function ( values ) {\n      // {...values} - this clones the original data\n      //enumerates the old state (values)\n      let newValues = { ...values };\n      if ( valueChangeId === values.key ) {\n        newValues.price = newPrice;\n      }\n      return newValues;\n    });\n\n    setCoinData(newCoinData);\n  }\n\n  // here we're passing our functions \n  // we write the function with the function itself\n  return (\n    <>\n    <Div>\n      <Header />\n      <AccountBalance amount={balance} \n      showBalance={showBalance}\n      handleBrrr={handleBrrr} \n      handleBalanceVisibilityChange={handleBalanceVisibilityChange} />\n      <CoinList coinData={coinData} \n      handleRefresh={handleRefresh} \n      handleTransaction={handleTransaction}\n      showBalance={showBalance} />\n      <div>\n      <P>Powered by <A href='https://api.coinpaprika.com/' target='_blank'>Coinpaprika</A></P>\n      <P>© 2022 - Designed by: <A href='https://github.com/ok-diego' target='_blank'>Diego Patino</A></P>\n      </div>\n    </Div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}